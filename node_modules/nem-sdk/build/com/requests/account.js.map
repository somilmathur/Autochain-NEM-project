{"version":3,"sources":["../../../src/com/requests/account.js"],"names":["data","endpoint","address","options","url","Helpers","formatEndpoint","method","headers","Headers","urlEncoded","qs","dataFromPublicKey","publicKey","harvestedBlocks","incomingTransactions","txHash","txId","params","outgoingTransactions","unconfirmedTransactions","unlockInfo","startHarvesting","privateKey","json","body","stopHarvesting","forwarded","namespacesOwned","parent","mosaicDefinitionsCreated","mosaicDefinitions","mosaicsOwned","allTransactions","getBatchAccountData","addresses","obj","i","length","push","getBatchHistoricalAccountData","block","accounts","getHistoricalAccountData","module","exports","batchData","historical","mosaics","owned","definitions","allDefinitions","namespaces","harvesting","blocks","start","stop","transactions","incoming","outgoing","unconfirmed","all"],"mappings":"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","file":"account.js","sourcesContent":["import Helpers from '../../utils/helpers';\nimport Headers from './headers';\nimport Send from './send';\n\n/**\n * Gets the AccountMetaDataPair of an account.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet data = function(endpoint, address) {\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/get',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets the AccountMetaDataPair of an account with a public Key.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} publicKey - An account public key\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet dataFromPublicKey = function(endpoint, publicKey) {\n\t// Configure the public key request\n\tconst options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/get/from-public-key',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'publicKey': publicKey}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets an array of harvest info objects for an account.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [HarvestInfo]{@link http://bob.nem.ninja/docs/#harvestInfo} objects\n */\nlet harvestedBlocks = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/harvests',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets an array of TransactionMetaDataPair objects where the recipient has the address given as parameter to the request.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - The 256 bit sha3 hash of the transaction up to which transactions are returned. (optional)\n * @param {string} txId - The transaction id up to which transactions are returned. (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet incomingTransactions = function(endpoint, address, txHash, txId){\n\t// Arrange\n\tlet params = {'address': address};\n\tif (txHash) params['hash'] = txHash;\n\tif (txId) params['id'] = txId;\n\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/incoming',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: params\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets an array of TransactionMetaDataPair objects where the sender has the address given as parameter to the request.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - The 256 bit sha3 hash of the transaction up to which transactions are returned. (optional)\n * @param {string} txId - The transaction id up to which transactions are returned. (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet outgoingTransactions = function(endpoint, address, txHash, txId){\n\t// Arrange\n\tlet params = {'address': address};\n\tif (txHash) params['hash'] = txHash;\n\tif (txId) params['id'] = txId;\n\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/outgoing',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: params\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets the array of transactions for which an account is the sender or receiver and which have not yet been included in a block.\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [UnconfirmedTransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#unconfirmedTransactionMetaDataPair} objects\n */\nlet unconfirmedTransactions = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/unconfirmedTransactions',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets information about the maximum number of allowed harvesters and how many harvesters are already using the node\n *\n * @param {object} endpoint - An NIS endpoint object\n *\n * @return {object} - An [UnlockInfo]{@link http://bob.nem.ninja/docs/#retrieving-the-unlock-info} object\n */\nlet unlockInfo = function(endpoint) {\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/unlocked/info',\n\t    method: 'POST',\n\t    headers: Headers.urlEncoded\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n/**\n * Unlocks an account (starts harvesting).\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} privateKey - A delegated account private key\n *\n * @return - Nothing\n */\nlet startHarvesting = function(endpoint, privateKey){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/unlock',\n\t    method: 'POST',\n\t    json: true,\n\t\tbody: {'value': privateKey}\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n /**\n * Locks an account (stops harvesting).\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} privateKey - A delegated account private key\n *\n * @return - Nothing\n */\nlet stopHarvesting = function(endpoint, privateKey){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/lock',\n\t    method: 'POST',\n\t    json: true,\n\t\tbody: {'value': privateKey}\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n/**\n * Gets the AccountMetaDataPair of the account for which the given account is the delegate account\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet forwarded = function(endpoint, address) {\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/get/forwarded',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: {'address': address}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets namespaces that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} parent - The namespace parent (optional)\n *\n * @return {object} - An array of [NamespaceMetaDataPair]{@link http://bob.nem.ninja/docs/#namespaceMetaDataPair} objects\n */\nlet namespacesOwned = function(endpoint, address, parent){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/namespace/page',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address, 'parent': parent || \"\"}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets mosaic definitions that an account has created\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} parent - The namespace parent (optional)\n *\n * @return {object} - An array of [MosaicDefinition]{@link http://bob.nem.ninja/docs/#mosaicDefinition} objects\n */\nlet mosaicDefinitionsCreated = function(endpoint, address, parent){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/definition/page',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address, 'parent': parent || \"\"}\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets mosaic definitions that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [MosaicDefinition]{@link http://bob.nem.ninja/docs/#mosaicDefinition} objects\n */\nlet mosaicDefinitions = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/owned/definition',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address }\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets mosaics that an account owns\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n *\n * @return {array} - An array of [Mosaic]{@link http://bob.nem.ninja/docs/#mosaic} objects\n */\nlet mosaicsOwned = function(endpoint, address){\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/mosaic/owned',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: { 'address': address }\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets all transactions of an account\n *\n * @param {object} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {string} txHash - The 256 bit sha3 hash of the transaction up to which transactions are returned. (optional)\n * @param {string} txId - The transaction id up to which transactions are returned. (optional)\n *\n * @return {array} - An array of [TransactionMetaDataPair]{@link http://bob.nem.ninja/docs/#transactionMetaDataPair} objects\n */\nlet allTransactions = function(endpoint, address, txHash, txId){\n\t// Arrange\n\tlet params = {'address': address};\n\tif (txHash) params['hash'] = txHash;\n\tif (txId) params['id'] = txId;\n\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/transfers/all',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: params\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\n/**\n * Gets the AccountMetaDataPair of an array of accounts.\n *\n * @param {string} endpoint - An NIS endpoint object\n * @param {array} addresses - An array of account addresses\n *\n * @return {object} - An object that contains an array of [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} objects\n */\nlet getBatchAccountData = function(endpoint, addresses){\n\tlet obj = {\n        'data':[]\n    };\n    for(var i = 0; i < addresses.length; i++){\n        obj.data.push({'account':addresses[i]});\n\t}\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/get/batch',\n\t    method: 'POST',\n\t    json: true,\n\t\tbody: obj\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n/**\n * Gets the AccountMetaDataPair of an array of accounts from an historical height.\n *\n * @param {string} endpoint - An NIS endpoint object\n * @param {array} addresses - An array of account addresses\n * @param {integer} block - The block height\n *\n * @return {object} - Account information for all the accounts on the given block\n */\nlet getBatchHistoricalAccountData = function(endpoint, addresses, block){\n\tlet obj = {\n        'accounts':[],\n        'startHeight': block,\n        'endHeight': block,\n        'incrementBy': 1\n    };\n    for(var i = 0; i < addresses.length; i++){\n        obj.accounts.push({'account':addresses[i]});\n\t}\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/historical/get/batch',\n\t    method: 'POST',\n\t    json: true,\n\t\tbody: obj\n\t}\n\t// Send the request\n\treturn Send(options);\n};\n\n/**\n * Gets the AccountMetaDataPair of an account from a certain block.\n *\n * @param {string} endpoint - An NIS endpoint object\n * @param {string} address - An account address\n * @param {integer} block - the block height\n *\n * @return {object} - An [AccountMetaDataPair]{@link http://bob.nem.ninja/docs/#accountMetaDataPair} object\n */\nlet getHistoricalAccountData = function(endpoint, address, block) {\n\tlet obj = {\n        'params': {\n            'address': address,\n            'startHeight': block,\n            'endHeight': block,\n            'increment': 1\n        }\n\t};\n\t// Configure the request\n\tvar options = {\n\t    url: Helpers.formatEndpoint(endpoint) + '/account/historical/get',\n\t    method: 'GET',\n\t    headers: Headers.urlEncoded,\n\t    qs: obj\n\t}\n\t// Send the request\n\treturn Send(options);\n}\n\nmodule.exports = {\n\tdata,\n\tdataFromPublicKey,\n\tbatchData: getBatchAccountData,\n\thistorical: {\n\t\tdata: getHistoricalAccountData,\n\t\tbatchData: getBatchHistoricalAccountData\n\t},\n\tunlockInfo,\n\tforwarded,\n\tmosaics: {\n\t\towned: mosaicsOwned,\n\t\tdefinitions: mosaicDefinitionsCreated,\n\t\tallDefinitions: mosaicDefinitions\n\t},\n\tnamespaces: {\n\t\towned: namespacesOwned\n\t},\n\tharvesting: {\n\t\tblocks: harvestedBlocks,\n\t\tstart: startHarvesting,\n\t\tstop: stopHarvesting\n\t},\n\ttransactions: {\n\t\tincoming: incomingTransactions,\n\t\toutgoing: outgoingTransactions,\n\t\tunconfirmed: unconfirmedTransactions,\n\t\tall: allTransactions\n\t}\n}"]}