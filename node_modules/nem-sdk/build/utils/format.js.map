{"version":3,"sources":["../../src/utils/format.js"],"names":["pubToAddress","input","networkId","Address","toAddress","address","toUpperCase","replace","match","join","nemDate","data","nemesis","Date","UTC","undefined","o","t","toUTCString","supply","mosaicId","mosaics","mosaicName","mosaicIdToName","mosaicDefinitionMetaDataPair","divisibilityProperties","$","grep","mosaicDefinition","properties","w","name","divisibility","length","value","parseInt","toFixed","split","Math","pow","b","r","supplyRaw","_divisibility","levyFee","mosaic","multiplier","levy","type","levyValue","fee","quantity","nemImportanceScore","nemValue","importanceTransferMode","hexToUtf8","slice","result","decodeURIComponent","escape","convert","hex2a","e","console","log","hexMessage","msg","payload","splitHex","parts","namespaceId","txTypeToName","id","TransactionTypes","transfer","importanceTransfer","multisigModification","provisionNamespace","mosaicSupply","module","exports"],"mappings":"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","file":"format.js","sourcesContent":["import convert from './convert';\nimport Address from '../model/address';\nimport TransactionTypes from '../model/transactionTypes';\n\n/**\n* Convert a public key to NEM address\n*\n* @param {string} input - The account public key\n* @param {number} networkId - The current network id\n*\n* @return {string} - A clean NEM address\n*/\nlet pubToAddress = function(input, networkId) {\n    return input && Address.toAddress(input, networkId);\n}\n\n/**\n* Add hyphens to a clean address\n*\n* @param {string} input - A NEM address\n*\n* @return {string} - A formatted NEM address\n*/\nlet address = function(input) {\n    return input && input.toUpperCase().replace(/-/g, '').match(/.{1,6}/g).join('-');\n}\n\n/**\n* Format a timestamp to NEM date\n*\n* @param {number} data - A timestamp\n*\n* @return {string} - A date string\n*/\nlet nemDate = function(data) {\n    let nemesis = Date.UTC(2015, 2, 29, 0, 6, 25);\n    if (data === undefined) return data;\n    let o = data;\n    let t = (new Date(nemesis + o * 1000));\n    return t.toUTCString();\n}\n\nlet supply = function(data, mosaicId, mosaics) {\n    if (data === undefined) return data;\n    let mosaicName = mosaicIdToName(mosaicId);\n    if (!(mosaicName in mosaics)) {\n        return ['unknown mosaic divisibility', data];\n    }\n    let mosaicDefinitionMetaDataPair = mosaics[mosaicName];\n    let divisibilityProperties = $.grep(mosaicDefinitionMetaDataPair.mosaicDefinition.properties, function(w) {\n        return w.name === \"divisibility\";\n    });\n    let divisibility = divisibilityProperties.length === 1 ? ~~(divisibilityProperties[0].value) : 0;\n    let o = parseInt(data, 10);\n    if (!o) {\n        if (divisibility === 0) {\n            return [\"0\", ''];\n        } else {\n            return [\"0\", o.toFixed(divisibility).split('.')[1]];\n        }\n    }\n    o = o / Math.pow(10, divisibility);\n    let b = o.toFixed(divisibility).split('.');\n    let r = b[0].split(/(?=(?:...)*$)/).join(\" \");\n    return [r, b[1] || \"\"];\n}\n\nlet supplyRaw = function(data, _divisibility) {\n    let divisibility = ~~_divisibility;\n    let o = parseInt(data, 10);\n    if (!o) {\n        if (divisibility === 0) {\n            return [\"0\", ''];\n        } else {\n            return [\"0\", o.toFixed(divisibility).split('.')[1]];\n        }\n    }\n    o = o / Math.pow(10, divisibility);\n    let b = o.toFixed(divisibility).split('.');\n    let r = b[0].split(/(?=(?:...)*$)/).join(\" \");\n    return [r, b[1] || \"\"];\n}\n\nlet levyFee = function(mosaic, multiplier, levy, mosaics) {\n        if (mosaic === undefined || mosaics === undefined) return mosaic;\n        if (levy === undefined || levy.type === undefined) return undefined;\n        let levyValue;\n        if (levy.type === 1) {\n            levyValue = levy.fee;\n        } else {\n            // Note, multiplier is in micro NEM\n            levyValue = (multiplier / 1000000) * mosaic.quantity * levy.fee / 10000;\n        }\n        let r = supply(levyValue, levy.mosaicId, mosaics);\n        return r[0] + \".\" + r[1];\n    };\n\n/**\n* Format a NEM importance score\n*\n* @param {number} data -  The importance score\n*\n* @return {array} - A formatted importance score at 10^-4\n*/\nlet nemImportanceScore = function(data) {\n    if (data === undefined) return data;\n    let o = data;\n    if (o) {\n        o *= 10000;\n        o = o.toFixed(4).split('.');\n        return [o[0], o[1]];\n    }\n    return [o, 0];\n}\n\n/**\n* Format a value to NEM value\n*\n* @param {number} data - An amount of XEM\n*\n* @return {array} - An array with values before and after decimal point\n*/\nlet nemValue = function(data) {\n    if (data === undefined) return data;\n        let o = data;\n        if (!o) {\n            return [\"0\", '000000'];\n        } else {\n            o = o / 1000000;\n            let b = o.toFixed(6).split('.');\n            let r = b[0].split(/(?=(?:...)*$)/).join(\" \");\n            return [r, b[1]];\n    }\n}\n\n/**\n* Return name of an importance transfer mode\n*\n* @return {string} - An importance transfer mode name\n*/\nlet importanceTransferMode = function(data) {\n    if (data === undefined) return data;\n    let o = data;\n    if (o === 1) return \"Activation\";\n    else if (o === 2) return \"Deactivation\";\n    else return \"Unknown\";\n}\n\n/**\n* Convert hex to utf8\n*\n* @param {string} data - Hex data\n*\n* @return {string} result - Utf8 string\n*/\nlet hexToUtf8 = function(data) {\n    if (data === undefined) return data;\n    let o = data;\n    if (o && o.length > 2 && o[0] === 'f' && o[1] === 'e') {\n        return \"HEX: \" + o.slice(2);\n    }\n    let result;\n    try {\n        result = decodeURIComponent(escape(convert.hex2a(o)))\n    } catch (e) {\n        //result = \"Error, message not properly encoded !\";\n        result = convert.hex2a(o);\n        console.log('invalid text input: ' + data);\n    }\n    //console.log(decodeURIComponent(escape( convert.hex2a(o) )));*/\n    //result = convert.hex2a(o);\n    return result;\n}\n\n/**\n* Verify if message is not encrypted and return utf8\n*\n* @param {object} msg - A message object\n*\n* @return {string} result - Utf8 string\n*/\nlet hexMessage = function(msg) {\n    if (msg === undefined) return msg;\n    if (msg.type === 1) {\n        return hexToUtf8(msg.payload);\n    } else {\n        return '';\n    }\n};\n\n/**\n* Split hex string into 64 characters segments\n*\n* @param {string} data - An hex string\n*\n* @return {array} - A segmented hex string\n*/\nlet splitHex = function(data) {\n    if (data === undefined) return data;\n    let parts = data.match(/[\\s\\S]{1,64}/g) || [];\n    let r = parts.join(\"\\n\");\n    return r;\n}\n\n/**\n * Return mosaic name from mosaicId object\n *\n * @param {object} mosaicId - A mosaicId object\n *\n * @return {string} - The mosaic name\n */\nlet mosaicIdToName = function(mosaicId) {\n    if (!mosaicId) return mosaicId;\n    return mosaicId.namespaceId + \":\" + mosaicId.name;\n}\n\n/**\n * Return the name of a transaction type id\n *\n * @param {number} id - A transaction type id\n *\n * @return {string} - The transaction type name\n */\nlet txTypeToName = function(id) {\n    switch (id) {\n        case TransactionTypes.transfer:\n            return 'Transfer';\n        case TransactionTypes.importanceTransfer:\n            return 'ImportanceTransfer';\n        case TransactionTypes.multisigModification:\n            return 'MultisigModification';\n        case TransactionTypes.provisionNamespace:\n            return 'ProvisionNamespace';\n        case TransactionTypes.mosaicDefinition:\n            return 'MosaicDefinition';\n        case TransactionTypes.mosaicSupply:\n            return 'MosaicSupply';\n        default:\n            return 'Unknown_' + id;\n    }\n}\n\nmodule.exports = {\n    splitHex,\n    hexMessage,\n    hexToUtf8,\n    importanceTransferMode,\n    nemValue,\n    nemImportanceScore,\n    levyFee,\n    supplyRaw,\n    supply,\n    nemDate,\n    pubToAddress,\n    address,\n    mosaicIdToName,\n    txTypeToName\n}"]}