{"version":3,"sources":["../../src/model/address.js"],"names":["alphabet","b32encode","s","parts","quanta","Math","floor","length","leftover","i","push","charAt","charCodeAt","replace","pop","join","b32decode","r","ArrayBuffer","b","Uint8Array","j","v","indexOf","toAddress","publicKey","networkId","binPubKey","CryptoJS","enc","Hex","parse","hash","SHA3","outputLength","hash2","RIPEMD160","networkPrefix","Network","id2Prefix","versionPrefixedRipemd160Hash","stringify","tempHash","stepThreeChecksum","substr","concatStepThreeAndStepSix","convert","hex2a","ret","isFromNetwork","_address","address","toString","toUpperCase","a","id2Char","isValid","decoded","ua2hex","slice","clean","module","exports"],"mappings":"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","file":"address.js","sourcesContent":["import convert from '../utils/convert';\nimport Network from './network';\nimport CryptoJS from 'crypto-js';\n\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n\n/**\n* Encode a string to base32\n*\n* @param {string} s - A string\n*\n* @return {string} - The encoded string\n*/\nlet b32encode = function(s) {\n    let parts = [];\n    let quanta = Math.floor((s.length / 5));\n    let leftover = s.length % 5;\n\n    if (leftover != 0) {\n        for (let i = 0; i < (5 - leftover); i++) {\n            s += '\\x00';\n        }\n        quanta += 1;\n    }\n\n    for (let i = 0; i < quanta; i++) {\n        parts.push(alphabet.charAt(s.charCodeAt(i * 5) >> 3));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5) & 0x07) << 2) | (s.charCodeAt(i * 5 + 1) >> 6)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 1) & 0x3F) >> 1)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 1) & 0x01) << 4) | (s.charCodeAt(i * 5 + 2) >> 4)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 2) & 0x0F) << 1) | (s.charCodeAt(i * 5 + 3) >> 7)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 3) & 0x7F) >> 2)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 3) & 0x03) << 3) | (s.charCodeAt(i * 5 + 4) >> 5)));\n        parts.push(alphabet.charAt(((s.charCodeAt(i * 5 + 4) & 0x1F))));\n    }\n\n    let replace = 0;\n    if (leftover == 1) replace = 6;\n    else if (leftover == 2) replace = 4;\n    else if (leftover == 3) replace = 3;\n    else if (leftover == 4) replace = 1;\n\n    for (let i = 0; i < replace; i++) parts.pop();\n    for (let i = 0; i < replace; i++) parts.push(\"=\");\n\n    return parts.join(\"\");\n}\n\n/**\n* Decode a base32 string.\n* This is made specifically for our use, deals only with proper strings\n*\n* @param {string} s - A base32 string\n*\n* @return {Uint8Array} - The decoded string\n*/\nlet b32decode = function(s) {\n    let r = new ArrayBuffer(s.length * 5 / 8);\n    let b = new Uint8Array(r);\n    for (let j = 0; j < s.length / 8; j++) {\n        let v = [0, 0, 0, 0, 0, 0, 0, 0];\n        for (let i = 0; i < 8; ++i) {\n            v[i] = alphabet.indexOf(s[j * 8 + i]);\n        }\n        let i = 0;\n        b[j * 5 + 0] = (v[i + 0] << 3) | (v[i + 1] >> 2);\n        b[j * 5 + 1] = ((v[i + 1] & 0x3) << 6) | (v[i + 2] << 1) | (v[i + 3] >> 4);\n        b[j * 5 + 2] = ((v[i + 3] & 0xf) << 4) | (v[i + 4] >> 1);\n        b[j * 5 + 3] = ((v[i + 4] & 0x1) << 7) | (v[i + 5] << 2) | (v[i + 6] >> 3);\n        b[j * 5 + 4] = ((v[i + 6] & 0x7) << 5) | (v[i + 7]);\n    }\n    return b;\n}\n\n/**\n* Convert a public key to a NEM address\n*\n* @param {string} publicKey - A public key\n* @param {number} networkId - A network id\n*\n* @return {string} - The NEM address\n*/\nlet toAddress = function(publicKey, networkId) {\n    let binPubKey = CryptoJS.enc.Hex.parse(publicKey);\n    let hash = CryptoJS.SHA3(binPubKey, {\n        outputLength: 256\n    });\n    let hash2 = CryptoJS.RIPEMD160(hash);\n    // 98 is for testnet\n    let networkPrefix = Network.id2Prefix(networkId);\n    let versionPrefixedRipemd160Hash = networkPrefix + CryptoJS.enc.Hex.stringify(hash2);\n    let tempHash = CryptoJS.SHA3(CryptoJS.enc.Hex.parse(versionPrefixedRipemd160Hash), {\n        outputLength: 256\n    });\n    let stepThreeChecksum = CryptoJS.enc.Hex.stringify(tempHash).substr(0, 8);\n    let concatStepThreeAndStepSix = convert.hex2a(versionPrefixedRipemd160Hash + stepThreeChecksum);\n    let ret = b32encode(concatStepThreeAndStepSix);\n    return ret;\n};\n\n/**\n* Check if an address is from a specified network\n*\n* @param {string} _address - An address\n* @param {number} networkId - A network id\n*\n* @return {boolean} - True if address is from network, false otherwise\n*/\nlet isFromNetwork = function(_address, networkId) {\n    let address = _address.toString().toUpperCase().replace(/-/g, '');\n    let a = address[0];\n    return Network.id2Char(networkId) === a;\n};\n\n/**\n* Check if an address is valid\n*\n* @param {string} _address - An address\n*\n* @return {boolean} - True if address is valid, false otherwise\n*/\nlet isValid = function(_address) {\n    let address = _address.toString().toUpperCase().replace(/-/g, '');\n    if (!address || address.length !== 40) {\n        return false;\n    }\n    let decoded = convert.ua2hex(b32decode(address));\n    let versionPrefixedRipemd160Hash = CryptoJS.enc.Hex.parse(decoded.slice(0, 42));\n    let tempHash = CryptoJS.SHA3(versionPrefixedRipemd160Hash, {\n        outputLength: 256\n    });\n    let stepThreeChecksum = CryptoJS.enc.Hex.stringify(tempHash).substr(0, 8);\n\n    return stepThreeChecksum === decoded.slice(42);\n};\n\n/**\n* Remove hyphens from an address\n*\n* @param {string} _address - An address\n*\n* @return {string} - A clean address\n*/\nlet clean = function(_address) {\n    return _address.toUpperCase().replace(/-|\\s/g,\"\");\n};\n\nmodule.exports = {\n    b32encode,\n    b32decode,\n    toAddress,\n    isFromNetwork,\n    isValid,\n    clean\n}"]}