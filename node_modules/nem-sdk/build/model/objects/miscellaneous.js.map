{"version":3,"sources":["../../../src/model/objects/miscellaneous.js"],"names":["endpoint","host","port","common","password","privateKey","isHW","messageTypes","multisigCosignatoryModification","type","publicKey","module","exports"],"mappings":";;AAAA;;;;;;;;AAQA,IAAIA,WAAW,SAAXA,QAAW,CAASC,IAAT,EAAeC,IAAf,EAAqB;AAChC,WAAO;AACH,gBAAQD,QAAQ,EADb;AAEH,gBAAQC,QAAQ;AAFb,KAAP;AAIH,CALD;;AAOA;;;;;;;;;AASA,IAAIC,SAAS,SAATA,MAAS,CAASC,QAAT,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqC;AACjD,WAAO;AACA,oBAAYF,YAAY,EADxB;AAEH,sBAAcC,cAAc,EAFzB;AAGA,gBAAQC,QAAQ;AAHhB,KAAP;AAKA,CAND;;AAQA;;;;;AAKA,IAAIC,eAAe,SAAfA,YAAe,GAAW;AAC1B,WAAO,CAAC;AACJ,iBAAS,CADL;AAEJ,gBAAQ;AAFJ,KAAD,EAGJ;AACC,iBAAS,CADV;AAEC,gBAAQ;AAFT,KAHI,EAMJ;AACC,iBAAS,CADV;AAEC,gBAAQ;AAFT,KANI,CAAP;AAUH,CAXD;;AAaA;;;;;;;;AAQA,IAAIC,kCAAkC,SAAlCA,+BAAkC,CAASC,IAAT,EAAeC,SAAf,EAA0B;AAC5D,WAAO;AACH,4BAAoBD,QAAQ,CADzB;AAEH,8BAAsBC;AAFnB,KAAP;AAIH,CALD;;AAOAC,OAAOC,OAAP,GAAiB;AACbZ,sBADa;AAEbG,kBAFa;AAGbI,8BAHa;AAIbC;AAJa,CAAjB","file":"miscellaneous.js","sourcesContent":["/**\n * An endpoint object\n *\n * @param {string} host - A NIS uri\n * @param {number} port - A port\n *\n * @return {object}\n */\nlet endpoint = function(host, port) {\n    return {\n        \"host\": host || \"\",\n        \"port\": port || \"\"\n    }\n};\n\n/**\n * A common object\n *\n * @param {string} password - A password\n * @param {string} privateKey - A privateKey\n * @param {boolean} isHW - True if hardware wallet, false otherwise\n *\n * @return {object}\n */\nlet common = function(password, privateKey, isHW) {\n\treturn {\n        \"password\": password || \"\",\n\t    \"privateKey\": privateKey || \"\",\n        \"isHW\": isHW || false\n    }\n};\n\n/**\n * Contains message types with name\n *\n * @return {array}\n */\nlet messageTypes = function() {\n    return [{\n        \"value\": 0,\n        \"name\": \"Hexadecimal\"\n    }, {\n        \"value\": 1,\n        \"name\": \"Unencrypted\"\n    }, {\n        \"value\": 2,\n        \"name\": \"Encrypted\"\n    }];\n}\n\n/**\n * A multisig cosignatory modification object\n *\n * @param {number} type - 1 if an addition, 2 if deletion\n * @param {string} publicKey - An account public key\n *\n * @return {object}\n */\nlet multisigCosignatoryModification = function(type, publicKey) {\n    return {\n        \"modificationType\": type || 1,\n        \"cosignatoryAccount\": publicKey\n    }\n}\n\nmodule.exports = {\n    endpoint,\n    common,\n    messageTypes,\n    multisigCosignatoryModification\n}"]}