{"version":3,"sources":["../../../src/model/objects/transactions.js"],"names":["transfer","recipient","amount","message","signature","multisigAccount","txHash","compressedAccount","length","toUpperCase","replace","mosaicDefinition","mosaicSupplyChange","multisigAggregateModification","namespaceProvision","namespaceName","namespaceParent","importanceTransfer","remoteAccount","mode","commonPart","txtype","senderPublicKey","timeStamp","due","version","network","module","exports"],"mappings":";;AAAA;;;;;;;;;AASA,IAAIA,WAAW,SAAXA,QAAW,CAASC,SAAT,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AAChD,WAAO;AACH,kBAAUD,UAAU,CADjB;AAEH,qBAAaD,aAAa,EAFvB;AAGH,8BAAsB,EAHnB;AAIH,sBAAc,KAJX;AAKH,2BAAoB,EALjB;AAMH,mBAAWE,WAAW,EANnB;AAOH,uBAAgB,CAPb;AAQH,mBAAW;AARR,KAAP;AAUH,CAXD;;AAaA;;;;;;;;AAQA,IAAIC,YAAY,SAAZA,SAAY,CAASC,eAAT,EAA0BC,MAA1B,EAAkC;AAC9C,QAAIC,oBAAoB,EAAxB;AACA,QAAI,OAAOF,eAAP,IAA0B,WAA1B,IAAyCA,gBAAgBG,MAA7D,EAAqE;AACjED,4BAAoBF,gBAAgBI,WAAhB,GAA8BC,OAA9B,CAAsC,IAAtC,EAA4C,EAA5C,CAApB;AACH;;AAED,WAAO;AACH,qBAAa;AACT,oBAAQJ,UAAU;AADT,SADV;AAIH,wBAAgBC;AAJb,KAAP;AAMH,CAZD;;AAcA;;;;;AAKA,IAAII,mBAAmB,SAAnBA,gBAAmB,GAAW;AAC9B,WAAO;AACH,sBAAc,EADX;AAEH,2BAAmB,EAFhB;AAGH,6BAAqB,EAHlB;AAIH,sBAAc;AACV,6BAAiB,CADP;AAEV,4BAAgB,CAFN;AAGV,4BAAgB,IAHN;AAIV,6BAAiB;AAJP,SAJX;AAUH,gBAAQ;AACJ,sBAAU,IADN;AAEJ,uBAAW,EAFP;AAGJ,uBAAW,CAHP;AAIJ,mBAAO;AAJH,SAVL;AAgBH,sBAAc,KAhBX;AAiBH,2BAAoB;AAjBjB,KAAP;AAmBH,CApBD;;AAsBA;;;;;AAKA,IAAIC,qBAAqB,SAArBA,kBAAqB,GAAW;AAChC,WAAO;AACH,kBAAU,EADP;AAEH,sBAAc,CAFX;AAGH,iBAAS,CAHN;AAIH,sBAAc,KAJX;AAKH,2BAAoB;AALjB,KAAP;AAOH,CARD;;AAUA;;;;;AAKA,IAAIC,gCAAgC,SAAhCA,6BAAgC,GAAW;AAC3C,WAAO;AACH,yBAAiB,EADd;AAEH,0BAAkB,IAFf;AAGH,sBAAc,KAHX;AAIH,2BAAoB;AAJjB,KAAP;AAMH,CAPD;;AASA;;;;;;;;AAQA,IAAIC,qBAAqB,SAArBA,kBAAqB,CAASC,aAAT,EAAwBC,eAAxB,EAAyC;AAC9D,WAAO;AACH,yBAAiBD,iBAAiB,EAD/B;AAEH,2BAAmBC,mBAAmB,IAFnC;AAGH,sBAAc,KAHX;AAIH,2BAAoB;AAJjB,KAAP;AAMH,CAPD;;AASA;;;;;;;;AAQA,IAAIC,qBAAqB,SAArBA,kBAAqB,CAASC,aAAT,EAAwBC,IAAxB,EAA8B;AACnD,WAAO;AACH,yBAAiBD,iBAAiB,EAD/B;AAEH,gBAAQC,QAAQ,EAFb;AAGH,sBAAc,KAHX;AAIH,2BAAoB;AAJjB,KAAP;AAMH,CAPD;;AASA;;;;;;;;;;;;AAYA,IAAIC,aAAa,SAAbA,UAAa,CAASC,MAAT,EAAiBC,eAAjB,EAAkCC,SAAlC,EAA6CC,GAA7C,EAAkDC,OAAlD,EAA2DC,OAA3D,EAAoE;AACjF,WAAO;AACH,gBAAQL,UAAU,EADf;AAEH,mBAAWI,WAAW,EAFnB;AAGH,kBAAUH,mBAAmB,EAH1B;AAIH,qBAAaC,aAAa,EAJvB;AAKH,oBAAYA,YAAYC,MAAM,EAAlB,IAAwB;AALjC,KAAP;AAOH,CARD;;AAUAG,OAAOC,OAAP,GAAiB;AACbf,gEADa;AAEbb,sBAFa;AAGbI,wBAHa;AAIbO,sCAJa;AAKbC,0CALa;AAMbE,0CANa;AAObG,0CAPa;AAQbG;AARa,CAAjB","file":"transactions.js","sourcesContent":["/**\n * An un-prepared transfer transaction object\n *\n * @param {string} recipient - A NEM account address\n * @param {number} amount - A number of XEM\n * @param {string} message - A message\n *\n * @return {object}\n */\nlet transfer = function(recipient, amount, message) {\n    return {\n        \"amount\": amount || 0,\n        \"recipient\": recipient || \"\",\n        \"recipientPublicKey\": \"\",\n        \"isMultisig\": false,\n        \"multisigAccount\" : \"\",\n        \"message\": message || \"\",\n        \"messageType\" : 1,\n        \"mosaics\": []\n    }\n}\n\n/**\n * An un-prepared signature transaction object\n *\n * @param  {string} multisigAccount - The multisig account address\n * @param  {string} txHash - The multisig transaction hash\n *\n * @return {object}\n */\nlet signature = function(multisigAccount, txHash) {\n    let compressedAccount = \"\";\n    if (typeof multisigAccount != \"undefined\" && multisigAccount.length) {\n        compressedAccount = multisigAccount.toUpperCase().replace(/-/g, \"\");\n    }\n\n    return {\n        \"otherHash\": {\n            \"data\": txHash || \"\"\n        },\n        \"otherAccount\": compressedAccount\n    }\n}\n\n/**\n * An un-prepared mosaic definition transaction object\n *\n * @return {object}\n */\nlet mosaicDefinition = function() {\n    return {\n        \"mosaicName\": \"\",\n        \"namespaceParent\": \"\",\n        \"mosaicDescription\": \"\",\n        \"properties\": {\n            \"initialSupply\": 0,\n            \"divisibility\": 0,\n            \"transferable\": true,\n            \"supplyMutable\": true\n        },\n        \"levy\": {\n            \"mosaic\": null,\n            \"address\": \"\",\n            \"feeType\": 1,\n            \"fee\": 5\n        },\n        \"isMultisig\": false,\n        \"multisigAccount\" : \"\"\n    }\n}\n\n/**\n * An un-prepared mosaic supply change transaction object\n *\n * @return {object}\n */\nlet mosaicSupplyChange = function() {\n    return {\n        \"mosaic\": \"\",\n        \"supplyType\": 1,\n        \"delta\": 0,\n        \"isMultisig\": false,\n        \"multisigAccount\" : \"\"\n    }\n}\n\n/**\n * An un-prepared multisig aggregate modification transaction object\n *\n * @return {object}\n */\nlet multisigAggregateModification = function() {\n    return {\n        \"modifications\": [],\n        \"relativeChange\": null,\n        \"isMultisig\": false,\n        \"multisigAccount\" : \"\"\n    }\n}\n\n/**\n * An un-prepared namespace provision transaction object\n *\n * @param {string} namespaceName - A namespace name\n * @param {string} namespaceParent - A namespace name\n *\n * @return {object}\n */\nlet namespaceProvision = function(namespaceName, namespaceParent) {\n    return {\n        \"namespaceName\": namespaceName || \"\",\n        \"namespaceParent\": namespaceParent || null,\n        \"isMultisig\": false,\n        \"multisigAccount\" : \"\"\n    }\n}\n\n/**\n * An un-prepared importance transfer transaction object\n *\n * @param {string} remoteAccount - A remote public key\n * @param {number} mode - 1 for activating, 2 for deactivating\n *\n * @return {object}\n */\nlet importanceTransfer = function(remoteAccount, mode) {\n    return {\n        \"remoteAccount\": remoteAccount || \"\",\n        \"mode\": mode || \"\",\n        \"isMultisig\": false,\n        \"multisigAccount\" : \"\"\n    }\n}\n\n/**\n * The common part of transactions\n *\n * @param {number} txType - A type of transaction\n * @param {string} senderPublicKey - A sender public key\n * @param {number} timeStamp - A timestamp for the transation\n * @param {number} due - A deadline in minutes\n * @param {number} version - A network version\n * @param {number} network - A network id\n *\n * @return {object} - A common transaction object\n */\nlet commonPart = function(txtype, senderPublicKey, timeStamp, due, version, network) {\n    return {\n        'type': txtype || \"\",\n        'version': version || \"\",\n        'signer': senderPublicKey || \"\",\n        'timeStamp': timeStamp || \"\",\n        'deadline': timeStamp + due * 60 || \"\"\n    };\n}\n\nmodule.exports = {\n    multisigAggregateModification,\n    transfer,\n    signature,\n    mosaicDefinition,\n    mosaicSupplyChange,\n    namespaceProvision,\n    importanceTransfer,\n    commonPart\n}"]}