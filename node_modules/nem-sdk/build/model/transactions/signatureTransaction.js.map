{"version":3,"sources":["../../../src/model/transactions/signatureTransaction.js"],"names":["prepare","common","tx","network","Error","kp","KeyPair","create","Helpers","fixPrivateKey","privateKey","due","Network","data","testnet","id","senderPublicKey","publicKey","toString","timeStamp","createNEMTimeStamp","version","getVersion","Objects","TransactionTypes","multisigSignature","fee","Fees","signatureTransaction","custom","entity","extendObj","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,UAAU,SAAVA,OAAU,CAASC,MAAT,EAAiBC,EAAjB,EAAqBC,OAArB,EAA8B;AACxC,QAAI,CAACF,MAAD,IAAW,CAACC,EAAZ,IAAkB,CAACC,OAAvB,EAAgC,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAChC,QAAIC,KAAKC,kBAAQC,MAAR,CAAeC,kBAAQC,aAAR,CAAsBR,OAAOS,UAA7B,CAAf,CAAT;AACA,QAAIC,MAAMR,YAAYS,kBAAQC,IAAR,CAAaC,OAAb,CAAqBC,EAAjC,GAAsC,EAAtC,GAA2C,KAAK,EAA1D;;AAEA,QAAIC,kBAAkBX,GAAGY,SAAH,CAAaC,QAAb,EAAtB;AACA,QAAIC,YAAYX,kBAAQY,kBAAR,EAAhB;AACA,QAAIC,UAAUT,kBAAQU,UAAR,CAAmB,CAAnB,EAAsBnB,OAAtB,CAAd;AACA,QAAIU,OAAOU,kBAAQhB,MAAR,CAAe,uBAAf,EAAwCiB,2BAAiBC,iBAAzD,EAA4ET,eAA5E,EAA6FG,SAA7F,EAAwGR,GAAxG,EAA6GU,OAA7G,CAAX;AACA,QAAIK,MAAMC,eAAKC,oBAAf;;AAEA,QAAIC,SAAS;AACT,eAAOH;AADE,KAAb;AAGA,QAAII,SAAStB,kBAAQuB,SAAR,CAAkB7B,EAAlB,EAAsBW,IAAtB,EAA4BgB,MAA5B,CAAb;AACA,WAAOC,MAAP;AACH,CAhBD;;AAkBAE,OAAOC,OAAP,GAAiB;AACbjC;AADa,CAAjB","file":"signatureTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\n\n/**\n * Prepare a signature transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - The un-prepared signature transaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [MultisigSignatureTransaction]{@link http://bob.nem.ninja/docs/#multisigSignatureTransaction} object ready for serialization\n */\nlet prepare = function(common, tx, network) {\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n\n    let senderPublicKey = kp.publicKey.toString();\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.multisigSignature, senderPublicKey, timeStamp, due, version);\n    let fee = Fees.signatureTransaction;\n\n    let custom = {\n        'fee': fee\n    };\n    let entity = Helpers.extendObj(tx, data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare\n}\n\n"]}