{"version":3,"sources":["../../../src/model/transactions/message.js"],"names":["prepare","common","tx","messageType","privateKey","CryptoHelpers","encode","recipientPublicKey","message","toString","isHW","Convert","utf8ToHex","Helpers","isHexadecimal","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;AAQA,IAAIA,UAAU,SAAVA,OAAU,CAASC,MAAT,EAAiBC,EAAjB,EAAqB;AAC/B,QAAIA,GAAGC,WAAH,KAAmB,CAAnB,IAAwBF,OAAOG,UAAnC,EAA+C;AAC3C,eAAO;AACH,oBAAQ,CADL;AAEH,uBAAWC,wBAAcC,MAAd,CAAqBL,OAAOG,UAA5B,EAAwCF,GAAGK,kBAA3C,EAA+DL,GAAGM,OAAH,CAAWC,QAAX,EAA/D;AAFR,SAAP;AAIH,KALD,MAKO,IAAIP,GAAGC,WAAH,KAAmB,CAAnB,IAAwBF,OAAOS,IAAnC,EAAyC;AAC5C,eAAO;AACH,oBAAQ,CADL;AAEH,uBAAWC,kBAAQC,SAAR,CAAkBV,GAAGM,OAAH,CAAWC,QAAX,EAAlB,CAFR;AAGH,yBAAaP,GAAGK;AAHb,SAAP;AAKH,KANM,MAMA,IAAGL,GAAGC,WAAH,KAAmB,CAAnB,IAAwBU,kBAAQC,aAAR,CAAsBZ,GAAGM,OAAH,CAAWC,QAAX,EAAtB,CAA3B,EAAyE;AAC5E,eAAO;AACH,oBAAQ,CADL;AAEH,uBAAW,OAAOP,GAAGM,OAAH,CAAWC,QAAX;AAFf,SAAP;AAIH,KALM,MAKA;AACH,eAAO;AACH,oBAAQ,CADL;AAEH,uBAAWE,kBAAQC,SAAR,CAAkBV,GAAGM,OAAH,CAAWC,QAAX,EAAlB;AAFR,SAAP;AAIH;AACJ,CAvBD;;AAyBAM,OAAOC,OAAP,GAAiB;AACbhB;AADa,CAAjB","file":"message.js","sourcesContent":["import CryptoHelpers from '../../crypto/cryptoHelpers';\nimport Convert from '../../utils/convert';\nimport Helpers from '../../utils/helpers';\n\n/**\n * Prepare a message object\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared transferTransaction object\n *\n * @return {object} - A prepared message object\n */\nlet prepare = function(common, tx) {\n    if (tx.messageType === 2 && common.privateKey) {\n        return {\n            'type': 2,\n            'payload': CryptoHelpers.encode(common.privateKey, tx.recipientPublicKey, tx.message.toString())\n        };\n    } else if (tx.messageType === 2 && common.isHW) {\n        return {\n            'type': 2,\n            'payload': Convert.utf8ToHex(tx.message.toString()),\n            'publicKey': tx.recipientPublicKey\n        };\n    } else if(tx.messageType === 0 && Helpers.isHexadecimal(tx.message.toString())) {\n        return {\n            'type': 1,\n            'payload': 'fe' + tx.message.toString()\n        };\n    } else {\n        return {\n            'type': 1,\n            'payload': Convert.utf8ToHex(tx.message.toString())\n        };\n    }\n}\n\nmodule.exports = {\n    prepare\n}"]}