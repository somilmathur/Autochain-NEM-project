{"version":3,"sources":["../../../src/model/transactions/mosaicSupplyChange.js"],"names":["prepare","common","tx","network","kp","KeyPair","create","Helpers","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","due","Network","data","testnet","id","entity","_construct","mosaic","supplyType","delta","senderPublicKey","mosaicId","timeStamp","createNEMTimeStamp","version","getVersion","Objects","TransactionTypes","mosaicSupply","fee","Fees","namespaceAndMosaicCommon","custom","extendObj","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,UAAU,SAAVA,OAAU,CAASC,MAAT,EAAiBC,EAAjB,EAAqBC,OAArB,EAA8B;AACxC,QAAIC,KAAKC,kBAAQC,MAAR,CAAeC,kBAAQC,aAAR,CAAsBP,OAAOQ,UAA7B,CAAf,CAAT;AACA,QAAIC,eAAeR,GAAGS,UAAH,GAAgBT,GAAGU,eAAH,CAAmBC,SAAnC,GAA+CT,GAAGS,SAAH,CAAaC,QAAb,EAAlE;AACA,QAAIC,MAAMZ,YAAYa,kBAAQC,IAAR,CAAaC,OAAb,CAAqBC,EAAjC,GAAsC,EAAtC,GAA2C,KAAK,EAA1D;AACA,QAAIC,SAASC,WAAWX,YAAX,EAAyBR,GAAGoB,MAA5B,EAAoCpB,GAAGqB,UAAvC,EAAmDrB,GAAGsB,KAAtD,EAA6DT,GAA7D,EAAkEZ,OAAlE,CAAb;AACA,QAAID,GAAGS,UAAP,EAAmB;AACfS,iBAAS,+BAAgBhB,GAAGS,SAAH,CAAaC,QAAb,EAAhB,EAAyCM,MAAzC,EAAiDL,GAAjD,EAAsDZ,OAAtD,CAAT;AACH;AACD,WAAOiB,MAAP;AACH,CATD;;AAWA;;;;;;;;;;;;AAYA,IAAIC,aAAa,SAAbA,UAAa,CAASI,eAAT,EAA0BC,QAA1B,EAAoCH,UAApC,EAAgDC,KAAhD,EAAuDT,GAAvD,EAA4DZ,OAA5D,EAAqE;AAClF,QAAIwB,YAAYpB,kBAAQqB,kBAAR,EAAhB;AACA,QAAIC,UAAUb,kBAAQc,UAAR,CAAmB,CAAnB,EAAsB3B,OAAtB,CAAd;AACA,QAAIc,OAAOc,kBAAQzB,MAAR,CAAe,uBAAf,EAAwC0B,2BAAiBC,YAAzD,EAAuER,eAAvE,EAAwFE,SAAxF,EAAmGZ,GAAnG,EAAwGc,OAAxG,CAAX;AACA,QAAIK,MAAMC,eAAKC,wBAAf;AACA,QAAIC,SAAS;AACT,oBAAYX,QADH;AAET,sBAAcH,UAFL;AAGT,iBAASC,KAHA;AAIT,eAAOU;AAJE,KAAb;AAMA,QAAId,SAASb,kBAAQ+B,SAAR,CAAkBrB,IAAlB,EAAwBoB,MAAxB,CAAb;AACA,WAAOjB,MAAP;AACH,CAbD;;AAeAmB,OAAOC,OAAP,GAAiB;AACbxC;AADa,CAAjB","file":"mosaicSupplyChange.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\nimport MultisigWrapper from './multisigWrapper';\n\n/**\n * Prepare a mosaic supply change transaction\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared mosaicSupplyChangeTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [MosaicSupplyChangeTransaction]{@link http://bob.nem.ninja/docs/#mosaicSupplyChangeTransaction} object ready for serialization\n */\nlet prepare = function(common, tx, network) {\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let entity = _construct(actualSender, tx.mosaic, tx.supplyType, tx.delta, due, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create a mosaic supply change transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {object} mosaicId - The mosaic id\n * @param {number} supplyType - The type of change\n * @param {number} delta - The amount involved in the change\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [MosaicSupplyChangeTransaction]{@link http://bob.nem.ninja/docs/#mosaicSupplyChangeTransaction} object\n */\nlet _construct = function(senderPublicKey, mosaicId, supplyType, delta, due, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.mosaicSupply, senderPublicKey, timeStamp, due, version);\n    let fee = Fees.namespaceAndMosaicCommon;\n    let custom = {\n        'mosaicId': mosaicId,\n        'supplyType': supplyType,\n        'delta': delta,\n        'fee': fee\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n};\n\nmodule.exports = {\n    prepare\n}"]}