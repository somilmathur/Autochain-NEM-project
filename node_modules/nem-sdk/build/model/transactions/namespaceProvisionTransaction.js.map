{"version":3,"sources":["../../../src/model/transactions/namespaceProvisionTransaction.js"],"names":["prepare","common","tx","network","Error","kp","KeyPair","create","Helpers","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","rentalFeeSink","Sinks","namespace","toUpperCase","replace","rentalFee","namespaceParent","Fees","subProvisionNamespaceTransaction","rootProvisionNamespaceTransaction","fqn","namespaceName","due","Network","data","testnet","id","entity","_construct","senderPublicKey","timeStamp","createNEMTimeStamp","version","getVersion","Objects","TransactionTypes","provisionNamespace","fee","namespaceAndMosaicCommon","custom","extendObj","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,UAAU,SAAVA,OAAU,CAAUC,MAAV,EAAkBC,EAAlB,EAAsBC,OAAtB,EAA+B;AACzC,QAAI,CAACF,MAAD,IAAW,CAACC,EAAZ,IAAkB,CAACC,OAAvB,EAAgC,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AAChC,QAAIC,KAAKC,kBAAQC,MAAR,CAAeC,kBAAQC,aAAR,CAAsBR,OAAOS,UAA7B,CAAf,CAAT;AACA,QAAIC,eAAeT,GAAGU,UAAH,GAAgBV,GAAGW,eAAH,CAAmBC,SAAnC,GAA+CT,GAAGS,SAAH,CAAaC,QAAb,EAAlE;AACA,QAAIC,gBAAgBC,gBAAMC,SAAN,CAAgBf,OAAhB,EAAyBgB,WAAzB,GAAuCC,OAAvC,CAA+C,IAA/C,EAAqD,EAArD,CAApB;AACA,QAAIC,kBAAJ;AACA;AACA,QAAInB,GAAGoB,eAAP,EAAwB;AACpBD,oBAAYE,eAAKC,gCAAjB;AACH,KAFD,MAEO;AACHH,oBAAYE,eAAKE,iCAAjB;AACH;AACD,QAAIH,kBAAkBpB,GAAGoB,eAAH,GAAqBpB,GAAGoB,eAAH,CAAmBI,GAAxC,GAA8C,IAApE;AACA,QAAIC,gBAAgBzB,GAAGyB,aAAH,CAAiBZ,QAAjB,EAApB;AACA,QAAIa,MAAMzB,YAAY0B,kBAAQC,IAAR,CAAaC,OAAb,CAAqBC,EAAjC,GAAsC,EAAtC,GAA2C,KAAK,EAA1D;AACA,QAAIC,SAASC,WAAWvB,YAAX,EAAyBK,aAAzB,EAAwCK,SAAxC,EAAmDC,eAAnD,EAAoEK,aAApE,EAAmFC,GAAnF,EAAwFzB,OAAxF,CAAb;AACA,QAAID,GAAGU,UAAP,EAAmB;AACfqB,iBAAS,+BAAgB5B,GAAGS,SAAH,CAAaC,QAAb,EAAhB,EAAyCkB,MAAzC,EAAiDL,GAAjD,EAAsDzB,OAAtD,CAAT;AACH;AACD,WAAO8B,MAAP;AACH,CApBD;;AAsBA;;;;;;;;;;;;;AAaA,IAAIC,aAAa,SAAbA,UAAa,CAASC,eAAT,EAA0BnB,aAA1B,EAAyCK,SAAzC,EAAoDC,eAApD,EAAqEK,aAArE,EAAoFC,GAApF,EAAyFzB,OAAzF,EAAkG;AAC/G,QAAIiC,YAAY5B,kBAAQ6B,kBAAR,EAAhB;AACA,QAAIC,UAAUT,kBAAQU,UAAR,CAAmB,CAAnB,EAAsBpC,OAAtB,CAAd;AACA,QAAI2B,OAAOU,kBAAQjC,MAAR,CAAe,uBAAf,EAAwCkC,2BAAiBC,kBAAzD,EAA6EP,eAA7E,EAA8FC,SAA9F,EAAyGR,GAAzG,EAA8GU,OAA9G,CAAX;AACA,QAAIK,MAAMpB,eAAKqB,wBAAf;AACA,QAAIC,SAAS;AACT,yBAAiB7B,cAAcG,WAAd,GAA4BC,OAA5B,CAAoC,IAApC,EAA0C,EAA1C,CADR;AAET,qBAAaC,SAFJ;AAGT,kBAAUC,eAHD;AAIT,mBAAWK,aAJF;AAKT,eAAOgB;AALE,KAAb;AAOA,QAAIV,SAASzB,kBAAQsC,SAAR,CAAkBhB,IAAlB,EAAwBe,MAAxB,CAAb;AACA,WAAOZ,MAAP;AACH,CAdD;;AAgBAc,OAAOC,OAAP,GAAiB;AACbhD;AADa,CAAjB","file":"namespaceProvisionTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\nimport Sinks from '../sinks';\nimport MultisigWrapper from './multisigWrapper';\n\n/**\n * Prepare a namespace provision transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared namespaceProvisionTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [ProvisionNamespaceTransaction]{@link http://bob.nem.ninja/docs/#provisionNamespaceTransaction} object ready for serialization\n */\nlet prepare = function (common, tx, network) {\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let rentalFeeSink = Sinks.namespace[network].toUpperCase().replace(/-/g, '');\n    let rentalFee;\n    // Set fee depending if namespace or sub\n    if (tx.namespaceParent) {\n        rentalFee = Fees.subProvisionNamespaceTransaction;\n    } else {\n        rentalFee = Fees.rootProvisionNamespaceTransaction;\n    }\n    let namespaceParent = tx.namespaceParent ? tx.namespaceParent.fqn : null;\n    let namespaceName = tx.namespaceName.toString();\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let entity = _construct(actualSender, rentalFeeSink, rentalFee, namespaceParent, namespaceName, due, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create a namespace provision transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} rentalFeeSink - The rental sink account\n * @param {number} rentalFee - The rental fee\n * @param {string} namespaceParent - The parent namespace\n * @param {string} namespaceName  - The namespace name\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [ProvisionNamespaceTransaction]{@link http://bob.nem.ninja/docs/#provisionNamespaceTransaction} object\n */\nlet _construct = function(senderPublicKey, rentalFeeSink, rentalFee, namespaceParent, namespaceName, due, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.provisionNamespace, senderPublicKey, timeStamp, due, version);\n    let fee = Fees.namespaceAndMosaicCommon;\n    let custom = {\n        'rentalFeeSink': rentalFeeSink.toUpperCase().replace(/-/g, ''),\n        'rentalFee': rentalFee,\n        'parent': namespaceParent,\n        'newPart': namespaceName,\n        'fee': fee\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare\n}"]}