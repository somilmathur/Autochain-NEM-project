{"version":3,"sources":["../../../src/model/transactions/mosaicDefinitionTransaction.js"],"names":["prepare","common","tx","network","kp","KeyPair","create","Helpers","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","rentalFeeSink","Sinks","mosaic","toUpperCase","replace","rentalFee","Fees","mosaicDefinitionTransaction","namespaceParent","fqn","mosaicName","mosaicDescription","mosaicProperties","properties","levy","due","Network","data","testnet","id","entity","_construct","senderPublicKey","timeStamp","createNEMTimeStamp","version","getVersion","Objects","TransactionTypes","mosaicDefinition","fee","namespaceAndMosaicCommon","levyData","feeType","address","custom","Object","keys","map","key","index","extendObj","module","exports"],"mappings":"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","file":"mosaicDefinitionTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\nimport Sinks from '../sinks';\nimport MultisigWrapper from './multisigWrapper';\n\n/**\n * Prepare a mosaic definition transaction\n *\n * @param {object} common - A common object\n * @param {object} tx - An un-prepared mosaicDefinitionTransaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [MosaicDefinitionCreationTransaction]{@link http://bob.nem.ninja/docs/#mosaicDefinitionCreationTransaction} object ready for serialization\n */\nlet prepare = function(common, tx, network){\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let rentalFeeSink = Sinks.mosaic[network].toUpperCase().replace(/-/g, '');\n    let rentalFee = Fees.mosaicDefinitionTransaction;\n    let namespaceParent = tx.namespaceParent.fqn;\n    let mosaicName = tx.mosaicName.toString();\n    let mosaicDescription = tx.mosaicDescription.toString();\n    let mosaicProperties = tx.properties;\n    let levy = tx.levy.mosaic ? tx.levy : null;\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let entity = _construct(actualSender, rentalFeeSink, rentalFee, namespaceParent, mosaicName, mosaicDescription, mosaicProperties, levy, due, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create a mosaic definition transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} rentalFeeSink - The rental sink account\n * @param {number} rentalFee - The rental fee\n * @param {string} namespaceParent - The parent namespace\n * @param {string} mosaicName - The mosaic name\n * @param {string} mosaicDescription - The mosaic description\n * @param {object} mosaicProperties - The mosaic properties object\n * @param {object} levy - The levy object\n * @param {number} due - The deadline in minutes\n * @param {number} network - A network id\n *\n * @return {object} - A [MosaicDefinitionCreationTransaction]{@link http://bob.nem.ninja/docs/#mosaicDefinitionCreationTransaction} object\n */\nlet _construct = function(senderPublicKey, rentalFeeSink, rentalFee, namespaceParent, mosaicName, mosaicDescription, mosaicProperties, levy, due, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.mosaicDefinition, senderPublicKey, timeStamp, due, version);\n    let fee = Fees.namespaceAndMosaicCommon;\n    let levyData = levy ? {\n        'type': levy.feeType,\n        'recipient': levy.address.toUpperCase().replace(/-/g, ''),\n        'mosaicId': levy.mosaic,\n        'fee': levy.fee,\n    } : null;\n    let custom = {\n        'creationFeeSink': rentalFeeSink.replace(/-/g, ''),\n        'creationFee': rentalFee,\n        'mosaicDefinition': {\n            'creator': senderPublicKey,\n            'id': {\n                'namespaceId': namespaceParent,\n                'name': mosaicName,\n            },\n            'description': mosaicDescription,\n            'properties': Object.keys(mosaicProperties).map((key, index) => {\n                return { \"name\": key, \"value\": mosaicProperties[key].toString() };\n            }),\n            'levy': levyData\n        },\n        'fee': fee\n    };\n    var entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare\n}"]}