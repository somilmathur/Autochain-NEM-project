{"version":3,"sources":["../../../src/model/transactions/send.js"],"names":["send","common","entity","endpoint","Error","privateKey","length","Helpers","isHexadecimal","kp","KeyPair","create","fixPrivateKey","result","Serialization","serializeTransaction","signature","sign","obj","Convert","ua2hex","toString","Requests","transaction","announce","JSON","stringify"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAIA,OAAO,SAAPA,IAAO,CAASC,MAAT,EAAiBC,MAAjB,EAAyBC,QAAzB,EAAmC;AAC1C,QAAG,CAACA,QAAD,IAAa,CAACD,MAAd,IAAwB,CAACD,MAA5B,EAAoC,MAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACpC,QAAIH,OAAOI,UAAP,CAAkBC,MAAlB,KAA6B,EAA7B,IAAmCL,OAAOI,UAAP,CAAkBC,MAAlB,KAA6B,EAApE,EAAwE,MAAM,IAAIF,KAAJ,CAAU,2DAAV,CAAN;AACxE,QAAI,CAACG,kBAAQC,aAAR,CAAsBP,OAAOI,UAA7B,CAAL,EAA+C,MAAM,IAAID,KAAJ,CAAU,wCAAV,CAAN;AAC/C,QAAIK,KAAKC,kBAAQC,MAAR,CAAeJ,kBAAQK,aAAR,CAAsBX,OAAOI,UAA7B,CAAf,CAAT;AACA,QAAIQ,SAASC,wBAAcC,oBAAd,CAAmCb,MAAnC,CAAb;AACA,QAAIc,YAAYP,GAAGQ,IAAH,CAAQJ,MAAR,CAAhB;AACA,QAAIK,MAAM;AACN,gBAAQC,kBAAQC,MAAR,CAAeP,MAAf,CADF;AAEN,qBAAaG,UAAUK,QAAV;AAFP,KAAV;AAIA,WAAOC,mBAASC,WAAT,CAAqBC,QAArB,CAA8BrB,QAA9B,EAAwCsB,KAAKC,SAAL,CAAeR,GAAf,CAAxC,CAAP;AACH,CAZD;;kBAcelB,I","file":"send.js","sourcesContent":["import Helpers from '../../utils/helpers';\nimport Convert from '../../utils/convert';\nimport Serialization from '../../utils/serialization';\nimport KeyPair from '../../crypto/keyPair';\nimport Requests from '../../com/requests';\n\n/**\n * Serialize a transaction and broadcast it to the network\n *\n * @param {object} common - A common object\n * @param {object} entity - A prepared transaction object\n * @param {object} endpoint - An NIS endpoint object\n *\n * @return {promise} - An announce transaction promise of the com.requests service\n */\nlet send = function(common, entity, endpoint) {\n    if(!endpoint || !entity || !common) throw new Error('Missing parameter !');\n    if (common.privateKey.length !== 64 && common.privateKey.length !== 66) throw new Error('Invalid private key, length must be 64 or 66 characters !');\n    if (!Helpers.isHexadecimal(common.privateKey)) throw new Error('Private key must be hexadecimal only !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let result = Serialization.serializeTransaction(entity);\n    let signature = kp.sign(result);\n    let obj = {\n        'data': Convert.ua2hex(result),\n        'signature': signature.toString()\n    };\n    return Requests.transaction.announce(endpoint, JSON.stringify(obj));\n}\n\nexport default send;"]}